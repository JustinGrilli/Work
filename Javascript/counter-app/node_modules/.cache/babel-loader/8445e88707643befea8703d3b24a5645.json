{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Justango\\\\Documents\\\\counter-app\\\\src\\\\components\\\\counter.jsx\";\nimport React, { Component } from \"react\";\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n\n    this.handleIncrement = product => {\n      console.log(product); // setState updates the state of the component\n\n      this.setState({\n        count: this.state.count + 1\n      });\n    };\n  }\n\n  render() {\n    return (// React.Fragment is in place of div, because this element will already be wrapped in a div, and this will not create a second\n      React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: this.getBadgeClasses(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, this.formatCount()), React.createElement(\"button\", {\n        // Can swap out { key: 1 } with a variable for a product\n        onClick: () => this.handleIncrement({\n          key: 1\n        }),\n        className: \"btn btn-secondary btn-sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19\n        },\n        __self: this\n      }, \"Increment\"))\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\"; // If the count is 0 then highlight yellow, otherwise highlight blue\n\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const count = this.state.count;\n    return count === 0 ? \"Zero\" : count;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["C:\\Users\\Justango\\Documents\\counter-app\\src\\components\\counter.jsx"],"names":["React","Component","Counter","state","count","handleIncrement","product","console","log","setState","render","getBadgeClasses","formatCount","key","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC9BE,KAD8B,GACtB;AACNC,MAAAA,KAAK,EAAE;AADD,KADsB;;AAAA,SAK9BC,eAL8B,GAKZC,OAAO,IAAI;AAC3BC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ,EAD2B,CAE3B;;AACA,WAAKG,QAAL,CAAc;AAAEL,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AAA5B,OAAd;AACD,KAT6B;AAAA;;AAW9BM,EAAAA,MAAM,GAAG;AACP,WACE;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAE,KAAKC,eAAL,EAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0C,KAAKC,WAAL,EAA1C,CADF,EAEE;AAAQ;AACN,QAAA,OAAO,EAAE,MAAM,KAAKP,eAAL,CAAqB;AAAEQ,UAAAA,GAAG,EAAE;AAAP,SAArB,CADjB;AAEE,QAAA,SAAS,EAAC,0BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF;AAFF;AAYD;;AAEDF,EAAAA,eAAe,GAAG;AAChB,QAAIG,OAAO,GAAG,kBAAd,CADgB,CAEhB;;AACAA,IAAAA,OAAO,IAAI,KAAKX,KAAL,CAAWC,KAAX,KAAqB,CAArB,GAAyB,SAAzB,GAAqC,SAAhD;AACA,WAAOU,OAAP;AACD;;AAEDF,EAAAA,WAAW,GAAG;AAAA,UACJR,KADI,GACM,KAAKD,KADX,CACJC,KADI;AAEZ,WAAOA,KAAK,KAAK,CAAV,GAAc,MAAd,GAAuBA,KAA9B;AACD;;AApC6B;;AAuChC,eAAeF,OAAf","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    count: 0\r\n  };\r\n\r\n  handleIncrement = product => {\r\n    console.log(product);\r\n    // setState updates the state of the component\r\n    this.setState({ count: this.state.count + 1 });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      // React.Fragment is in place of div, because this element will already be wrapped in a div, and this will not create a second\r\n      <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button // Can swap out { key: 1 } with a variable for a product\r\n          onClick={() => this.handleIncrement({ key: 1 })}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    // If the count is 0 then highlight yellow, otherwise highlight blue\r\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { count } = this.state;\r\n    return count === 0 ? \"Zero\" : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n"]},"metadata":{},"sourceType":"module"}